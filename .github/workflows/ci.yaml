# Since the workflow is triggered on every push to all branches, there's no need to trigger on pull request
on: [push]

name: CI
jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: nivlheim
          POSTGRES_DB: nivlheim
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    #defaults:
   #   run:
   #     env:
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
      - name: Debug
        run: |
          echo $PWD
          echo $GOPATH
        env:
          GO111MODULE: "off"
          GOPATH: "${{ runner.temp }}/go"
      - name: Install repo to GOPATH
        run: |
          mkdir -p $GOPATH/unioslo/nivlheim
          rsync -av server/service/ $GOPATH/unioslo/nivlheim/
        env:
          GOPATH: "${{ runner.temp }}/go"
      #- name: Install dependencies
      #  run: go get
      #  working-directory: server/service
        #working-directory: "${{ runner.temp }}/go/unioslo/nivlheim"
      #  env:
      #    GO111MODULE: "off"
      #    GOPATH: "${{ runner.temp }}/go"
      - name: Install
        run: go install -v github.com/unioslo/nivlheim/server/service
        working-directory: server/service
        env:
          GO111MODULE: "off"
          GOPATH: "${{ runner.temp }}/go"
      - name: Test
        run: go test github.com/unioslo/nivlheim/server/service
        #working-directory: server/service
        #working-directory: "${{ runner.temp }}/go/unioslo/nivlheim"
        env:
          GO111MODULE: "off"
          GOPATH: "${{ runner.temp }}/go"
          NIVLHEIM_PGHOST: localhost
          NIVLHEIM_PGUSER: nivlheim
          NIVLHEIM_PGDATABASE: nivlheim
          NIVLHEIM_PGPASSWORD: postgres
          NIVLHEIM_PGSSLMODE: disable
  build:
    name: Build server image

    # This operation is expensive, so don't bother if tests fail.
    needs: test

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: nivlheim
          POSTGRES_DB: nivlheim
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Guix cache
        uses: actions/cache@v2
        with:
          # Note: /gnu/store may exceed the limit of 5GiB, so don't
          # cache it.  TODO: Selective caching with 'guix archive'?
          path: |
            ~/.cache/guix
          key: guix-cache-${{ github.sha }}
          restore-keys: |
            guix-cache-
      - name: Read channels.scm
        run: |
          echo "CHANNELS<<EOF" >> $GITHUB_ENV
          cat ci/channels.scm >> $GITHUB_ENV
          echo EOF >> $GITHUB_ENV
      - name: Install Guix
        uses: PromyLOPH/guix-install-action@v1
        with:
          channels: "${{ env.CHANNELS }}"
      - name: Build Nivlheim
        run: |
          guix build -m manifest.scm
      - name: Start the server
        run: |
          guix shell -m manifest.scm -- nivlheim &
        env:
          NIVLHEIM_PGHOST: localhost
          NIVLHEIM_PGUSER: nivlheim
          NIVLHEIM_PGPASSWORD: postgres
          NIVLHEIM_PGDATABASE: nivlheim
          NIVLHEIM_PGSSLMODE: disable
      - name: Test API
        run: |
          # Give the server some time to initialize.
          sleep 5
          curl http://localhost:4040/api/v2/status
      - name: Pack container image
        run: |
          guix pack -f docker --root=nivlheim-image.tar.gz \
            --entry-point=bin/nivlheim \
            -S /etc/profile=etc/profile \
            -m manifest.scm
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nivlheim-image.tar.gz
          path: nivlheim-image.tar.gz

  buildwww:
    name: Build httpd+cgi image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Docker build
      run: docker build --file ci/docker/Dockerfile --tag nivlheim-www:latest .
    - name: Docker save
      run: |
        IMAGE=`docker images | head -2 | tail -1 | awk '{print $3}'`
        docker inspect $IMAGE
        docker save nivlheim-www | gzip > nivlheim-www.tar.gz
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: nivlheim-www.tar.gz
        path: nivlheim-www.tar.gz

  buildclient:
    name: Build client image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Docker build
      run: |
        cp client/client.yaml tmp_client.yaml
        echo "  server: localhost" >> tmp_client.yaml
        docker build --file ci/docker/client_Dockerfile --tag nivlheimclient:latest .
        docker save nivlheimclient | gzip > nivlheim-client.tar.gz
        rm tmp_client.yaml
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: nivlheim-client.tar.gz
        path: nivlheim-client.tar.gz

  test-scripts:
    name: Run test scripts
    needs: [build, buildwww, buildclient]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test:
          - cert_handling.sh
          - cfengine.sh
          - change_ca.sh
          - client_timing.sh
          - clones.sh
          - powershell.sh
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download artifacts
      uses: actions/download-artifact@v2
      # the name input parameter is not provided, so all artifacts will be downloaded
    - name: Load images
      run: |
        docker load --input nivlheim-www.tar.gz/nivlheim-www.tar.gz
        docker load --input nivlheim-image.tar.gz/nivlheim-image.tar.gz
        docker load --input nivlheim-client.tar.gz/nivlheim-client.tar.gz
    - name: Start containers
      run: docker-compose -f "ci/docker/docker-compose.yml" up -d
    - name: SSL handshake
      run: openssl s_client -connect localhost:443 -prexit
      continue-on-error: true
    - name: Status API
      run: curl -k --no-progress-meter https://localhost/api/v2/status
    - name: Run one of the test scripts
      run: tests/test_${{ matrix.test }}
    - name: Retrieve logs from Docker
      if: always()
      run: docker-compose -f "ci/docker/docker-compose.yml" logs
    - name: Retrieve server logs
      if: always()
      run: |
        echo "------- access_log -------------------------------"
        docker exec docker_nivlheimweb_1 grep -v 127.0.0.1 /var/log/httpd/access_log  || true
        echo "------- error_log --------------------------------"
        docker exec docker_nivlheimweb_1 cat /var/log/httpd/error_log || true
        echo "------- system.log--------------------------------"
        docker exec docker_nivlheimweb_1 cat /var/log/nivlheim/system.log || true
    - name: Stop containers
      if: always()
      run: docker-compose -f "ci/docker/docker-compose.yml" down

  publish:
    if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
    name: Publish server image
    needs: [test-scripts]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: nivlheim-image.tar.gz
      - name: Load image
        run: docker load < nivlheim-image.tar.gz
      - name: Log in to registry
        run: >
          echo "${{ secrets.GITHUB_TOKEN }}"
          | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/nivlheim
          if [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
            TAG_NAME=latest
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          fi
          docker tag nivlheim:latest "$IMAGE_ID:$TAG_NAME"
          docker push "$IMAGE_ID:$TAG_NAME"

  publishwww:
    if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
    name: Publish httpd+cgi image
    needs: [test-scripts]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: nivlheim-www.tar.gz
      - name: Load image
        run: docker load < nivlheim-www.tar.gz
      - name: Log in to registry
        run: >
          echo "${{ secrets.GITHUB_TOKEN }}"
          | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/nivlheim_www
          if [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
            TAG_NAME=latest
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          fi
          docker tag nivlheim-www:latest "$IMAGE_ID:$TAG_NAME"
          docker push "$IMAGE_ID:$TAG_NAME"

  cd_hook:
    name: Webhook to local builders
    needs: [test-scripts]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: HTTP request
        run: curl -sS "http://nivlheim-test.uio.no/hook.pl?commit=${GITHUB_SHA}&branch=${GITHUB_REF_NAME}"
